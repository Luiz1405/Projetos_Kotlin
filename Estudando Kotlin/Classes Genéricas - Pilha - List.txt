class MutableStack<E>(vararg items: E) {                //Classe com uma definição de método genérico
    
    private val elements = items.toMutableList()        //Elementos que estão chegando como parametro do construtor e convertendo para uma lista.
    
    fun push(element: E) = elements.add(element)        //Recebe um elemento do tipo "E" e adiciona esse elemento na lista com o método add 
    
    fun peek(): E = elements.last()                     //Selectiona o ultimo elemento sem remover.
    
    fun pop(): E = elements.removeAt(elements.size - 1) //Seleciona o ultimo elemento e remove.
    
    fun isEmpty() = elements.isEmpty()                  //Verifica se está vazia.
                                
    fun size() = elements.size                          //Verifica o tamanho.
    
    override fun toString() = "mutableStack(${elements.joinToString()})" //Converter a pilha para texto, ficando mais fácil de visualizar.
}

fun main(){
    
    val stack = MutableStack(0.62, 3.14, 2.7)          //Criando um pilhando passando 3 valores.
    stack.push(9.87)                                   //Adicionando um valor ao final da pilha.
    println(stack)                                     //Mostrando a pilha.
    
    println("peek(): ${stack.peek()}")                 //selecionando o ultimo elemento da pilha.
    println(stack)                                     //Mostrando o ultimo elemento.
    
    for (i in 1..stack.size()){
        println("pop(): ${stack.pop()}")               //Estrutura de repetição que cria um indice, indo do 1 até o tamanho da pilha.
        println(stack)
    }
}